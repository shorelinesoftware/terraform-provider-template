---
page_title: "{{ .ProviderShortName | trimspace }}_notebook Resource - {{ .ProviderName | trimspace }}"
subcategory: ""
description: |- Notebooks replace static runbooks by capturing interactive debug and remediation sessions in a convenient UI.
---

# {{ .ProviderShortName | trimspace }}_notebook (Resource)

Through {{ .RenderedProviderName | trimspace }}'s web-based UI, Notebooks automatically capture an entire debug and remediation session -- which can optionally be associated with a specific Alarm -- and then be shared with other team members to streamline future incident response. With Notebooks you can:

- Create a series of interactive Op statement cells allowing you to execute Op commands within your browser -- all without installing or configuring the local CLI.
- Define and use dynamic parameters across Notebook Op cells.
- Memorialize Notebooks with historical snapshots.
- Add Markdown-based notes to inform operators how to use the Notebook.
- Associate existing Alarms and Notebooks, allowing on-call members to click through to an interactive debugging and remediation Notebook directly from the triggered Alarm UI.

## Required Properties

Each Notebook uses a variety of properties to determine its behavior. The required properties when creating a Notebook are:

- `name`: string - A unique symbol name for the Notebook object.
- `cells`: list(object) - A list of cells represented by JSON objects. Cells may either be Op statement cells or Markdown cells.

### Download a Notebook as a Terraform resource

You can download an entire Notebook directly as a Terraform resource. This will allow you to just plug in the TF code into your infrastructure and deploy the runbook immediately.

1. Click the **Actions** button on the right side of the active Notebook panel.
2. Select the **Download Notebook as Terraform** button to download the full configuration of the current Notebook as a Terraform resource.

## Defining a Notebook using the legacy `data` property

You can also export the Notebook's configuration as a JSON file and then freely modify, share, and upload this Notebook at any time.

Note: this way of defining is **deprecated**. Please refer to the above instructions using the new format.

The following example creates a Notebook named `my_notebook`.

1. Download a Notebook as JSON.
2. Only keep the `cells`, `params`, `external_params`, and `enabled` fields fron the JSON file. Note: `externalParams` needs to be renamed to `external_params` in the JSON file.
3. Save the Notebook JSON to local path within your Terraform project.
4. Define a new `{{ .ProviderShortName | trimspace }}_notebook` Terraform resource in your Terraform configuration that points the `data` property to the correct local module path.

   {{tffile "examples/resources/runbook/example.tf"}}

-> See the {{ .RenderedProviderName | trimspace }} Notebooks Documentation for more info on creating and using Notebooks.

{{ .SchemaMarkdown | trimspace }}
